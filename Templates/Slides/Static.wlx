CellsContainer := ImportComponent["Components/CellsContainer.wlx"];
{CellGenerator, CellGeneratorScript}   = ImportComponent["CellGenerator.wlx"];

{loadSettings, storeSettings}        = ImportComponent["Frontend/Settings.wl"];

settings = <||>;

Global`UINotebook (*`*);


pmIncludes[param_, blacklist_List] := 
Table[ 
    Table[ 
      FileNameJoin[{WLJS`PM`Packages[i, "name"], StringSplit[j, "/"]} // Flatten]
    , {j, {WLJS`PM`Packages[i, "wljs-meta", param]} // Flatten} ]
, {i, Select[WLJS`PM`Packages // Keys, (!MemberQ[blacklist, #] && WLJS`PM`Packages[#, "enabled"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], param])&]}] // Flatten;

existsOrEmpty[settings_, field_] := If[KeyExistsQ[settings, field], settings[field], {}]

getRepo[Rule[_, url_String]] := StringReplace[url, "https://github.com/"~~s_:>s]
getBranch[Rule[_, url_String]] := "master"

getRepo[Rule[_, Rule[url_String, _]]] := StringReplace[url, "https://github.com/"~~s_:>s]
getBranch[Rule[_, Rule[url_String, branch_String]]] := branch

ExtensionsJS[Rule["Settings", settings_]] := If[settings["ExportHTMLUseCDN"] === True,
  (With[{
    url = StringJoin[StringTemplate["https://cdn.jsdelivr.net/gh/``@``/"][getRepo[#["key"]], getBranch[#["key"]]], #["path"]]
  },

    <script type="module" src="{url}"></script>

  ]& /@ Flatten[Table[
      Table[
          Echo[<|"key"->WLJS`PM`Packages[i, "key"], "path"->j, "original"->i|>];
          <|"key"->WLJS`PM`Packages[i, "key"], "path"->j|>
      , {j, {WLJS`PM`Packages[i, "wljs-meta", "js"]} // Flatten}]
  , {i, Select[WLJS`PM`Packages // Keys, (!MemberQ[existsOrEmpty[settings, "ExportHTMLExclude"], #] && WLJS`PM`Packages[#, "enabled"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], "minjs"])&]} ]]) // ToStringRiffle
,
  With[{Data = Import[FileNameJoin[{"wljs_packages", #}], "Text"]},
    <script type="module">
        <Data/>
    </script>
  ] &/@ pmIncludes["minjs", existsOrEmpty[settings, "ExportHTMLExclude"]] // ToStringRiffle
]

ExtensionsStyles[Rule["Settings", settings_]] := If[settings["ExportHTMLUseCDN"] === True,
  (With[{
    url = StringJoin[StringTemplate["https://cdn.jsdelivr.net/gh/``@``/``"][getRepo[#["key"]], getBranch[#["key"]]], #["path"]]
  },
    <link rel="stylesheet" href="{url}"/>
  ]& /@ Flatten[Table[
      Table[
          <|"key"->WLJS`PM`Packages[i, "key"], "path"->j|>
      , {j, {WLJS`PM`Packages[i, "wljs-meta", "styles"]} // Flatten}]
  , {i, Select[WLJS`PM`Packages // Keys, (!MemberQ[existsOrEmpty[settings, "ExportHTMLExclude"], #] && WLJS`PM`Packages[#, "enabled"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], "styles"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], "minjs"])&]} ]] )// ToStringRiffle
,
  With[{Data = Import[FileNameJoin[{"wljs_packages", #}], "Text"]},
    <style>
      <Data/>
    </style> 
  ] &/@ pmIncludes["styles", existsOrEmpty[settings, "ExportHTMLExclude"]] // ToStringRiffle
];


ProduceStyles[path_] := With[{},
  With[{Data = Import[#, "Text"]},
    <style>
      <Data/>
    </style> 
  ] &/@ {FileNameJoin[{path, "Styles", "Custom.css"}], FileNameJoin[{path, "Styles", "Optimized.css"}]}
] // ToStringRiffle


ExportObjects[Rule["Notebook", notebook_]] := With[{
  JSONAssoc = ExportByteArray[#["Public"] &/@ notebook["Objects"], "ExpressionJSON", "Compact"->1] // ByteArrayToString
},

  <script id="json-objects" type="application/json">{"storage":<JSONAssoc/>}</script>
]

ExportSymbols[Rule["Notebook", notebook_]] := With[{
  JSONAssoc = ExportByteArray[If[MemberQ[notebook["Properties"], "Symbols"], notebook["Symbols"], <||>], "ExpressionJSON", "Compact"->1] // ByteArrayToString
},

  <script id="json-symbols" type="application/json">{"storage":<JSONAssoc/>}</script>
]


ExportStorage[Rule["Notebook", notebook_], Rule["Settings", settings_]] := With[{
  Storage = ExportByteArray[
    If[!MemberQ[notebook["Properties"], "Storage"] || (settings["ExportHTMLNotebookStore"] === False), <||>, notebook["Storage"]]
  , "ExpressionJSON", "Compact"->1] // ByteArrayToString
},
  <script id="json-storage" type="application/json">{"storage":<Storage/>}</script>
]

imageProcessor[i_String, notebook_] := Module[{img, path = StringSplit[i, "/"]},
  img = {Import[FileNameJoin[{DirectoryName @ notebook["Path"], Drop[path,-1], URLDecode[path // Last]} // Flatten]]} // Flatten // First;
  StringJoin["data:image/jpeg;base64,", ExportString[img, {"Base64", "JPEG"}, CompressionLevel->0]]
]

cellProcess[any_, _, _, _, _] := any

cellPreProcess[cell_] := cell

cellProcess[data_, "Input", _, _, _] := Join[data, <|"Data" -> "", "Display"->"none"|>]
cellProcess[data_, "Output", _, _, _] := Join[data, <|"Invisible"->True|>]

cellProcess[data_, "Output", "markdown", notebook_, settings_] := data

cellProcess[data_, "Output", "slide" | "slides", notebook_, settings_] := Join[data, <|"Display"->"printslide", "Data" -> 
  If[settings["ExportHTMLImages"] === False,
    data["Data"]
  ,
    StringReplace[data["Data"], {
        RegularExpression["!\\[[\\w| |\\d]*\\]\\(([^):]*)\\)"] :> With[{i = imageProcessor["$1", notebook]},
          StringJoin["![](", StringReplace[i, "\n"->""], ")"]
        ],

        RegularExpression["src=\"\\s?([^):\"=\\>\\<]*).(png|jpeg|jpg|ttf|gif|webm|bmp|svg)\\s?\""] :> With[{i = imageProcessor[StringJoin["$1", ".", "$2"], notebook]},
          StringJoin["src=\"", StringReplace[i, "\n"->""], "\""]
        ]      
      }
    ]
  ]
|>]

cellProcess[data_, "Output", "slides", notebook_, settings_] := Join[data, <|"Display"->"printslide", "Data" -> 
  If[settings["ExportHTMLImages"] === False,
    data["Data"]
  ,
    StringReplace[data["Data"], {
        RegularExpression["!\\[[\\w| |\\d]*\\]\\(([^):]*)\\)"] :> With[{i = imageProcessor["$1", notebook]},
          StringJoin["![](", StringReplace[i, "\n"->""], ")"]
        ],

        RegularExpression["src=\"([^):\"=\\>\\<.]*).(png|jpeg|jpg|ttf|gif|webm|bmp|svg)\""] :> With[{i = imageProcessor[StringJoin["$1", ".", "$2"], notebook]},
          StringJoin["src=\"", StringReplace[i, "\n"->""], "\""]
        ]      
      }
    ]
  ]
|>]

ExportCells[Rule["Notebook", notebook_], Rule["Settings", settings_]] := Module[{},
  With[{cells = Map[
      Function[cell,
          With[{list = #["Hash"] &/@ (cell["Notebook","Cells"])},
              With[{serialized = CellObj`Serialize[cell](*`*)},
                <|"Data"->cellProcess[serialized, serialized["Type"], serialized["Display"], notebook, settings], "Template"->CellGenerator[cellPreProcess[cell], Null, <||>]|>
              ]
          ]
      ]   
    ,    
        notebook["Cells"]
    ],

    CellList = #["Hash"] &/@ ( (notebook["Cells"][[1]] )["Notebook","Cells"])
  },
    With[{
      Storage = ExportByteArray[<|"Cells"->cells, "List"->CellList|>, "ExpressionJSON", "Compact"->1] // ByteArrayToString
    },
  
      <script id="cells-data" type="application/json">{"storage": <Storage/>}</script>
    ]
  ]
];

Component[OptionsPattern[]] := Module[{settings}, With[{
  Title = OptionValue["Title"],
  notebook = OptionValue["Notebook"],
  RootStyles = ProduceStyles[OptionValue["Root"]],
  nid = OptionValue["Notebook"]["Hash"]
},

    loadSettings[settings];

  { "<!DOCTYPE html>",  
    <html class="print-pdf" os="Browser"> 
        <head>
            <meta charset="UTF-8"/>
            <meta serializer="hsfn-4"/>
            <ExportObjects Notebook={notebook}/>
            <meta serializer="separator"/>
            <ExportCells Notebook={notebook} Settings={settings}/>
            <meta serializer="separator"/>
            <ExportStorage Notebook={notebook} Settings={settings}/>
            <meta serializer="end"/>
            <meta serializer="hsfn-extras"/>
            <ExportSymbols Notebook={notebook}/>
            <meta serializer="end-extras"/>
            <RootStyles/>  
            <ExtensionsStyles Settings={settings}/>
            <ExtensionsJS Settings={settings}/> 
            <WebUIInitializationScript/> 
            <WLJSTransportScript Port={0}/>
            <style>
              main {
                width: 100% !important;
                display: inline-block !important; 
              }
            </style>
        </head>  
        <body class=" dark:bg-gray-700 bg-white"> 
          <div>
            <div id="frame">
              <div>
                <main class="dark:invert dark:contrast-75 dark:brightness-5 dark:hue-rotate-180 rounded-lg bg-white shadow">
                    <CellsContainer Notebook={notebook}></CellsContainer>
                </main>
              </div>
            </div>
          </div>   
          <script type="module">
            const url = new URL(window.location.href);
            url.searchParams.set('print-pdf', '');
            window.history.replaceState(null, null, url); // or pushState

            window.server = {
              emitt: () => {}
            }   
            class emptyClass {
                constructor () {
                    
                }
            }
              window.SupportedCells['none'] = {
                view: emptyClass
              };
          </script>   
          <script type="module">
            const jsonstorage = document.getElementById('json-symbols');
            const store = JSON.parse(jsonstorage.innerText)["storage"];

            const a = async () => {
              const assoc = await interpretate(store, {hold:true});

              Object.keys(assoc).forEach(element => {
                core[element] = async (args, env) => {
                  return await interpretate(core[element].data, env)
                };

                core[element].data = assoc[element];
              });
            }

            a(store);
          </script>          
          <script type="module">
            const jsonstorage = document.getElementById('json-objects');
            const store = JSON.parse(jsonstorage.innerText)["storage"];

            const a = async () => {
              const assoc = await interpretate(store, {hold:true});

              Object.keys(assoc).forEach(element => {
                const o = new ObjectStorage(element);
                o.cached = true;
                o.cache = assoc[element];
              });
            }

            a(store);
          </script>
          <script type="module">
            const jsonstorage = document.getElementById('cells-data');
            const store = JSON.parse(jsonstorage.innerText)["storage"];
          

            const process = async () => {
              const assoc = await interpretate(store, {});
              const list    = assoc.List;

              for (const item of Object.values(assoc.Cells)) {
                const template = item.Template;
                const store    = item.Data;

                new CellWrapper(template, store, list, "", {IgnoreList:true});
              }
            }

            process();
          </script>
        </body>
    </html>
  } // StringRiffle
]]

Options[Component] = {"Title" -> "Example", "Notebook"->""}

Component