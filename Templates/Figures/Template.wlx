compress[str_String] := With[{arr = Normal[ExportByteArray[str, "String"] ]},
 BaseEncode[ByteArray[Developer`RawCompress[arr](*`*) ] ]
];

FigureCode[OptionsPattern[]] := With[{
    JSON = compress[ExportString[OptionValue["Expression"], "ExpressionJSON", "Compact"->1] ],
    Sym  = compress[ExportString[OptionValue["Symbols"], "ExpressionJSON", "Compact"->1] ],
    UId  = CreateUUID[]
},    
    If[AssociationQ @ OptionValue["Symbols"],
        <div class="wljs-wrapper">
            <div class="wljs-container" id="{UId}"></div>
            <script type="module">
                let symbols = '<Sym/>';
                const decodedDT = await interpretate.unzlib64String(symbols);
                symbols = await interpretate(JSON.parse(decodedDT), {hold:true});
                Object.keys(symbols).forEach(element => {
                    core[element] = async (args, env) => {
                        return await interpretate(core[element].data, env)
                    };

                    core[element].data = symbols[element];                    
                });
                //polyfill
                core.Offload = (args, env) => interpretate(args[0], env)

                let payload = '<JSON/>';
                const decodedPayload = await interpretate.unzlib64String(payload);
                payload = JSON.parse(decodedPayload);

                const env = {element: document.getElementById('<UId/>'), global: {}};
                const instance = new ExecutableObject('figure-'+uuidv4(), env, payload);
                instance.assignScope(env);
                instance.execute();
            </script>
        </div>

    ,

        <div class="wljs-wrapper">
            <div class="wljs-container" id="{UId}"></div>
            <script type="module">
                let payload = '<JSON/>';
                const decoded = await interpretate.unzlib64String(payload)
                payload = JSON.parse(decoded);
    
                const env = {element: document.getElementById('<UId/>'), global: {}};
                const instance = new ExecutableObject('figure-'+uuidv4(), env, payload);
                instance.assignScope(env);
                instance.execute();
            </script>
        </div>
    ]

]

Options[FigureCode] = {"Expression" -> {}, "Symbols" -> Null}


SymbolsCode[OptionsPattern[]] := With[{
    JSON = compress[ExportString[OptionValue["Expression"], "ExpressionJSON", "Compact"->1] ],
    UId  = CreateUUID[]
},    
    <div class="wljs-wrapper">
        <div class="wljs-container" id="{UId}"></div>
        <script type="module">
            let payload = '<JSON/>';
            const decoded = await interpretate.unzlib64String(payload);
            payload = JSON.parse(decoded);

            //INDEV
            core[element] = async (args, env) => {
                return await interpretate(core[element].data, env)
            };

            core[element].data = assoc[element];
        </script>
    </div>
]

Options[SymbolsCode] = {"Expression" -> {}}


existsOrEmpty[settings_, field_] := If[KeyExistsQ[settings, field], settings[field], {}]

getRepo[Rule[_, url_String]] := StringReplace[url, "https://github.com/"~~s_:>s]
getBranch[Rule[_, url_String]] := "master"

getRepo[Rule[_, Rule[url_String, _]]] := StringReplace[url, "https://github.com/"~~s_:>s]
getBranch[Rule[_, Rule[url_String, branch_String]]] := branch

HeadCode[OptionsPattern[]] := With[{
    settings = OptionValue["Settings"]
},
  ToStringRiffle[Flatten @ {With[{
    url = StringJoin[StringTemplate["https://cdn.jsdelivr.net/gh/``@``/"][getRepo[#["key"]], getBranch[#["key"]]], #["path"]]
  },

    <script type="module" src="{url}"></script>

  ]& /@ Flatten[Table[
      Table[
          Echo[<|"key"->WLJSPackages`Packages[i, "key"], "path"->j, "original"->i|>];
          <|"key"->WLJSPackages`Packages[i, "key"], "path"->j|>
      , {j, {WLJSPackages`Packages[i, "wljs-meta", "js"]} // Flatten}]
  , {i, Select[WLJSPackages`Packages // Keys, (!MemberQ[existsOrEmpty[settings, "ExportHTMLExclude"], #] && WLJSPackages`Packages[#, "enabled"] && TrueQ[WLJSPackages`Packages[#, "wljs-meta", "figureExportRequired"]] && KeyExistsQ[WLJSPackages`Packages[#, "wljs-meta"], "minjs"])&]} ]] 
    
,
    <style>
        .graphics2d-controller {
            display: none
        }
        .graphics3d-controller {
            display: none
        }
        .g3d-label {
            font-size: small;
        }
        /* customize .wljs-wrapper and .wljs-container to your needs */
    </style>
}]
]

Options[HeadCode] = {"Settings"->{}}


{FigureCode, HeadCode}