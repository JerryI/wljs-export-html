CellsContainer := ImportComponent["Components/CellsContainer.wlx"];
{CellGenerator, CellGeneratorScript}   = ImportComponent["CellGenerator.wlx"];

{ControlsL, ControlsR, ControlsScript}            = ImportComponent["Components/Controls.wlx"];

Global`UINotebook (*`*);

ExtensionsJS = With[{Data = Import[FileNameJoin[{"wljs_packages", #}], "Text"]},
    <script type="module">
        <Data/>
    </script>
] &/@ WLJS`PM`Includes["minjs"] // ToStringRiffle;

ExtensionsStyles = With[{Data = Import[FileNameJoin[{"wljs_packages", #}], "Text"]},
  <style>
    <Data/>
  </style> 
] &/@ WLJS`PM`Includes["styles"] // ToStringRiffle;

{NotebookComponent, NotebookScript} = ImportComponent["NotebookView.wlx"];

ProduceStyles[path_] := With[{},
  With[{Data = Import[#, "Text"]},
    <style>
      <Data/>
    </style> 
  ] &/@ {FileNameJoin[{path, "Styles", "Custom.css"}], FileNameJoin[{path, "Styles", "Optimized.css"}]}
] // ToStringRiffle


ExportObjects[Rule["Notebook", notebook_]] := With[{
  JSONAssoc = ExportString[#["Public"] &/@ notebook["Objects"], "ExpressionJSON", "Compact"->1]
},

  <script id="json-objects" type="application/json">{"storage":<JSONAssoc/>}</script>
]


ExportStorage[Rule["Notebook", notebook_]] := With[{
  Storage = ExportString[
    If[!MemberQ[notebook["Properties"], "Storage"], <||>, notebook["Storage"]]
  , "ExpressionJSON", "Compact"->1]
},
  <script id="json-storage" type="application/json">{"storage":<Storage/>}</script>
]

imageProcessor[i_String, notebook_] := Module[{img, path = StringSplit[i, "/"]},
  img = Import[FileNameJoin[{DirectoryName @ notebook["Path"], Drop[path,-1], URLDecode[path // Last]} // Flatten]];
  StringJoin["data:image/jpeg;base64,", ExportString[img, {"Base64", "JPEG"}, CompressionLevel->0]]
]

cellProcess[any_, _, _, _] := any
cellProcess[data_, "Output", "markdown", notebook_] := Join[data, <|"Data" -> 
  StringReplace[data["Data"], RegularExpression["!\\[[\\w| |\\d]*\\]\\(([^):]*)\\)"] :> With[{i = imageProcessor["$1", notebook]},
      StringJoin["![](", StringReplace[i, "\n"->""], ")"]
    ]
  ]
|>]

ExportCells[Rule["Notebook", notebook_]] := Module[{},
  With[{cells = Map[
      Function[cell,
          With[{list = #["Hash"] &/@ (cell["Notebook","Cells"])},
              With[{serialized = CellObj`Serialize[cell](*`*)},
                <|"Data"->cellProcess[serialized, serialized["Type"], serialized["Display"], notebook], "Template"->CellGenerator[cell, Null, <||>]|>
              ]
          ]
      ]   
    ,    
        notebook["Cells"]
    ],

    CellList = #["Hash"] &/@ ( (notebook["Cells"][[1]] )["Notebook","Cells"])
  },
    With[{
      Storage = ExportString[<|"Cells"->cells, "List"->CellList|>, "ExpressionJSON", "Compact"->1]
    },
  
      <script id="cells-data" type="application/json">{"storage": <Storage/>}</script>
    ]
  ]
];

Component[OptionsPattern[]] := With[{
  Title = OptionValue["Title"],
  notebook = OptionValue["Notebook"],
  RootStyles = ProduceStyles[OptionValue["Root"]],
  nid = OptionValue["Notebook"]["Hash"]
},
    <html class="h-full" os="Browser"> 
        <head>
            <meta charset="UTF-8"/>
            <meta serializer="hsfn-4"/>
            <ExportObjects Notebook={notebook}/>
            <meta serializer="separator"/>
            <ExportCells Notebook={notebook}/>
            <meta serializer="separator"/>
            <ExportStorage Notebook={notebook}/>
            <meta serializer="end"/>
            <RootStyles/>  
            <ExtensionsStyles/>
            <ExtensionsJS/> 
            <WebUIInitializationScript/> 
            <WLJSTransportScript Port={0}/>
        </head>  
        <body class="h-full dark:bg-gray-700 bg-white"> 
          <div>
            <div class="pl-2" id="frame">
              <div class="h-full flex flex-col">
                <main class="grow flex flex-col dark:invert dark:contrast-75 dark:brightness-5 m-4 mt-2 rounded-lg bg-white shadow">
                    <CellsContainer Notebook={notebook}></CellsContainer>
                </main>
              </div>
            </div>
          </div>   
          <script type="module">
            window.server = {
              emitt: () => {}
            }   
          </script>   
          <script type="module">
            <ControlsScript/>   
          </script> 
          <script type="module">
            const jsonstorage = document.getElementById('json-objects');
            const store = JSON.parse(jsonstorage.innerText)["storage"];

            const a = async () => {
              const assoc = await interpretate(store, {hold:true});

              Object.keys(assoc).forEach(element => {
                const o = new ObjectStorage(element);
                o.cached = true;
                o.cache = assoc[element];
              });
            }

            a(store);
          </script>
          <script type="module">
            const jsonstorage = document.getElementById('cells-data');
            const store = JSON.parse(jsonstorage.innerText)["storage"];
          

            const process = async () => {
              const assoc = await interpretate(store, {});
              const list    = assoc.List;

              for (const item of Object.values(assoc.Cells)) {
                const template = item.Template;
                const store    = item.Data;

                new CellWrapper(template, store, list, "", {IgnoreList:true});
              }
            }

            process();
          </script>
        </body>
    </html>
]

Options[Component] = {"Title" -> "Example", "Notebook"->""}

Component