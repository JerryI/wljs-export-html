
Component[OptionsPattern[]] := With[{
    UId = OptionValue["UId"],
    Objects = OptionValue["Data"],
    OnLoad  = CreateUUID[],
    Event   = CreateUUID[],
    promise = OptionValue["Promise"],
    objectsLoader = CreateUUID[],
    ModalController = OptionValue["ModalController"],
    client = OptionValue["Client"],
    TB = With[{}, Table[
            <li class="group w-full flex flex-start cursor-default select-none rounded-md list-none">
                <button type="button" class="rounded focus:outline-none focus:ring-2 focus:ring-indigo-600">
                    <div id="preview-{Item}"></div>
                </button>                        
            </li> 
        , {Item, OptionValue["Data"]}]
    ]
},

EventHandler[Event, {
    "Ok" -> Function[result,
        Echo["Result:"]; Echo[result];
        
        EventFire[objectsLoader, "Destroy", <|"Client"->client|>];
        EventFire[ModalController, "Close", True];
        EventFire[promise, Resolve, result];
    ],

    "Cancel" -> Function[Null,
        EventFire[objectsLoader, "Destroy", <|"Client"->client|>];
        EventFire[ModalController, "Close", True];
    ]
}];

EventHandler[OnLoad, Function[Null,
    EventFire[objectsLoader, "LoadList", <|"Client"->client, "List" -> Objects|>];
]];

<ul class="scroll-py-2 divide-y divide-gray-500 divide-opacity-10 overflow-y-auto p-0">
  <li class="p-4 pt-2 list-none">
     <h2 class="mb-2 mt-2 text-xs font-semibold text-gray-900 dark:text-gray-400">What to export?</h2>
     <ul class="text-sm text-gray-700 flex flex-col gap-y-1 p-0" id="{UId}">
        <TB/>    
     </ul>
     <WebUIJSBind Event={objectsLoader}>
        const init = (elements) => {
            let close;

            let cursor = 0;


            const keyListener = (e) => {
                    switch(e.keyCode) {                                    
                        case 27:
                            console.log('escape');
                            close();
                        break;

                        case 13:
                            console.log('enter');
                            submit(cursor);
                        break; 

                        case  40:
                            if (cursor === elements.length - 1) return;
                            cursor++;
                            elements[cursor].parentNode.focus();
                        break;

                        case 38:
                            if (cursor === 0) return;
                            cursor--;
                            elements[cursor].parentNode.focus();
                        break;

                        default:

                    }
            };

            elements[0].parentNode.focus();

            for (let index=0; index<elements.length; ++index) {
                //elements.forEach((el, index) => {
                
                elements[index].parentNode.addEventListener('click', (ev) => {
                    submit(index);
                    ev.stopPropagation();
                });
            };




            document.addEventListener('keydown', keyListener);
            let submit = (index) => {
                document.removeEventListener('keydown', keyListener);
                //element.removeEventListener('click', submit);
                window.removeEventListener('click', close);  
                server.emitt('<Event/>', index + 1, 'Ok');
                submit = () => {};
            };

            close = () => {
                document.removeEventListener('keydown', keyListener);
                //element.removeEventListener('click', submit);
                window.removeEventListener('click', close);  
                server.emitt('<Event/>', 'Null', 'Cancel');
            };

            window.addEventListener('click', close);   
        }

        const globals = [];
	
	    //binding to event patterns
	    this.on('LoadList', async (data) => {
		    const assoc = await interpretate(data, {hold:true});
            
		    const List = await interpretate(assoc.List, {});
            const elements = List.map((name) => document.getElementById('preview-'+name));

            init(elements);

		    List.forEach(async (el, index) => {
                const element = elements[index];

                const g = {};
                globals.push(g);

                const env = {global: g, element: element};
                const uid = el;
            
                let obj;
                console.log('check cache');
                if (ObjectHashMap[uid]) {
                    obj = ObjectHashMap[uid];
                } else {
                    obj = new ObjectStorage(uid);
                }
                //console.log(obj);
            
                const copy = {...env};
                const store = await obj.get();
                const instance = new ExecutableObject('preview-static-'+uuidv4(), copy, store, true);
                instance.assignScope(copy);
                
                //don't increase number of references
                //obj.assign(instance);
            
                console.warn('Installing component #' + instance.uid);
                await instance.execute();                
            });
	    });

        this.on('Destroy', (data) => {
            globals.forEach((global) => {
                if (global.stack) {
                    for (const obj of Object.values(global.stack))  {
                        obj.dispose();
                    }
                }
            });
        });



     </WebUIJSBind>     
     <WebUIOnLoad Event={OnLoad}/>
  </li>
</ul>
]

Options[Component] = {}

Component