CellsContainer := ImportComponent["Components/CellsContainer.wlx"];
{CellGenerator, CellGeneratorScript}   = ImportComponent["CellGenerator.wlx"];

{ControlsL, ControlsR, ControlsScript}            = ImportComponent["Components/Controls.wlx"];

{loadSettings, storeSettings}        = ImportComponent["Frontend/Settings.wl"];

settings = <||>;

Global`UINotebook (*`*);


pmIncludes[param_, blacklist_List] := 
Table[ 
    Table[ 
      FileNameJoin[{WLJS`PM`Packages[i, "name"], StringSplit[j, "/"]} // Flatten]
    , {j, {WLJS`PM`Packages[i, "wljs-meta", param]} // Flatten} ]
, {i, Select[WLJS`PM`Packages // Keys, (!MemberQ[blacklist, #] && WLJS`PM`Packages[#, "enabled"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], param])&]}] // Flatten;

existsOrEmpty[settings_, field_] := If[KeyExistsQ[settings, field], settings[field], {}]

getRepo[Rule[_, url_String]] := StringReplace[url, "https://github.com/"~~s_:>s]
getBranch[Rule[_, url_String]] := "master"

getRepo[Rule[_, Rule[url_String, _]]] := StringReplace[url, "https://github.com/"~~s_:>s]
getBranch[Rule[_, Rule[url_String, branch_String]]] := branch

ExtensionsJS[Rule["Settings", settings_]] := If[settings["ExportHTMLUseCDN"] === True,
  (With[{
    url = StringJoin[StringTemplate["https://cdn.jsdelivr.net/gh/``@``/"][getRepo[#["key"]], getBranch[#["key"]]], #["path"]]
  },

    <script type="module" src="{url}"></script>

  ]& /@ Flatten[Table[
      Table[
          Echo[<|"key"->WLJS`PM`Packages[i, "key"], "path"->j, "original"->i|>];
          <|"key"->WLJS`PM`Packages[i, "key"], "path"->j|>
      , {j, {WLJS`PM`Packages[i, "wljs-meta", "js"]} // Flatten}]
  , {i, Select[WLJS`PM`Packages // Keys, (!MemberQ[existsOrEmpty[settings, "ExportHTMLExclude"], #] && WLJS`PM`Packages[#, "enabled"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], "minjs"])&]} ]]) // ToStringRiffle
,
  With[{Data = Import[FileNameJoin[{"wljs_packages", #}], "Text"]},
    <script type="module">
        <Data/>
    </script>
  ] &/@ pmIncludes["minjs", existsOrEmpty[settings, "ExportHTMLExclude"]] // ToStringRiffle
]

ExtensionsStyles[Rule["Settings", settings_]] := If[settings["ExportHTMLUseCDN"] === True,
  (With[{
    url = StringJoin[StringTemplate["https://cdn.jsdelivr.net/gh/``@``/``"][getRepo[#["key"]], getBranch[#["key"]]], #["path"]]
  },
    <link rel="stylesheet" href="{url}"/>
  ]& /@ Flatten[Table[
      Table[
          <|"key"->WLJS`PM`Packages[i, "key"], "path"->j|>
      , {j, {WLJS`PM`Packages[i, "wljs-meta", "styles"]} // Flatten}]
  , {i, Select[WLJS`PM`Packages // Keys, (!MemberQ[existsOrEmpty[settings, "ExportHTMLExclude"], #] && WLJS`PM`Packages[#, "enabled"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], "styles"] && KeyExistsQ[WLJS`PM`Packages[#, "wljs-meta"], "minjs"])&]} ]] )// ToStringRiffle
,
  With[{Data = Import[FileNameJoin[{"wljs_packages", #}], "Text"]},
    <style>
      <Data/>
    </style> 
  ] &/@ pmIncludes["styles", existsOrEmpty[settings, "ExportHTMLExclude"]] // ToStringRiffle
];


ProduceStyles[path_] := With[{},
  With[{Data = Import[#, "Text"]},
    <style>
      <Data/>
    </style> 
  ] &/@ {FileNameJoin[{path, "Styles", "Custom.css"}], FileNameJoin[{path, "Styles", "Optimized.css"}]}
] // ToStringRiffle


ExportObjects[Rule["Notebook", notebook_]] := With[{
  JSONAssoc = ExportByteArray[#["Public"] &/@ notebook["Objects"], "ExpressionJSON", "Compact"->1] // ByteArrayToString
},

  <script id="json-objects" type="application/json">{"storage":<JSONAssoc/>}</script>
]

ExportSymbols[Rule["Notebook", notebook_]] := With[{
  JSONAssoc = ExportByteArray[If[MemberQ[notebook["Properties"], "Symbols"], notebook["Symbols"], <||>], "ExpressionJSON", "Compact"->1] // ByteArrayToString
},

  <script id="json-symbols" type="application/json">{"storage":<JSONAssoc/>}</script>
]


ExportStorage[Rule["Notebook", notebook_], Rule["Settings", settings_]] := With[{
  Storage = ExportByteArray[
    If[!MemberQ[notebook["Properties"], "Storage"] || (settings["ExportHTMLNotebookStore"] === False), <||>, notebook["Storage"]]
  , "ExpressionJSON", "Compact"->1] // ByteArrayToString
},
  <script id="json-storage" type="application/json">{"storage":<Storage/>}</script>
]

imageProcessor[i_String, notebook_] := Module[{img, path = StringSplit[i, "/"]},
  img = {Import[FileNameJoin[{DirectoryName @ notebook["Path"], Drop[path,-1], URLDecode[path // Last]} // Flatten]]} // Flatten // First;
  StringJoin["data:image/jpeg;base64,", ExportString[img, {"Base64", "JPEG"}, CompressionLevel->0]]
]

cellProcess[any_, _, _, _, _] := any

cellProcess[data_, "Output", "markdown", notebook_, settings_] := Join[data, <|"Data" -> 
  If[settings["ExportHTMLImages"] === False,
    data["Data"]
  ,
    StringReplace[data["Data"], {
        RegularExpression["!\\[[\\w| |\\d]*\\]\\(([^):]*)\\)"] :> With[{i = imageProcessor["$1", notebook]},
          StringJoin["![](", StringReplace[i, "\n"->""], ")"]
        ],
      
        RegularExpression["src=\"([^):\"=\\>\\<.]*).(png|svg|jpeg|jpg|ttf|gif|webm|bmp)\""] :> With[{i = imageProcessor[StringJoin["$1", ".", "$2"], notebook]},
          StringJoin["src=\"", StringReplace[i, "\n"->""], "\""]
        ]      
      }
    ]
  ]
|>]


cellProcess[data_, "Output", "slide" | "slides", notebook_, settings_] := With[{p = Join[data, <|"Data" -> 
  If[settings["ExportHTMLImages"] === False,
    data["Data"]
  ,
    StringReplace[data["Data"], {
        RegularExpression["!\\[[\\w| |\\d]*\\]\\(([^):]*)\\)"] :> With[{i = imageProcessor["$1", notebook]},
          StringJoin["![](", StringReplace[i, "\n"->""], ")"]
        ],

        RegularExpression["src=\"\\s?([^):\"=\\>\\<]*).(png|svg|jpeg|jpg|ttf|gif|webm|bmp)\"\\s?"] :> With[{i = imageProcessor[StringJoin["$1", ".", "$2"], notebook]},
          StringJoin["src=\"", StringReplace[i, "\n"->""], "\""]
        ]      
      }
    ]
  ]
|>]},
  Print["Process cell!!!!!!!!!!!!!!!!!!!!!!!!!!!"];
  Print[ToString[p, InputForm]];
  p
]

ExportCells[Rule["Notebook", notebook_], Rule["Settings", settings_]] := Module[{},
  With[{cells = Map[
      Function[cell,
          With[{list = #["Hash"] &/@ (cell["Notebook","Cells"])},
              With[{serialized = CellObj`Serialize[cell](*`*)},
                <|"Data"->cellProcess[serialized, serialized["Type"], serialized["Display"], notebook, settings], "Template"->CellGenerator[cell, Null, <||>]|>
              ]
          ]
      ]   
    ,    
        notebook["Cells"]
    ],

    CellList = #["Hash"] &/@ ( (notebook["Cells"][[1]] )["Notebook","Cells"])
  },
    With[{
      Storage = ExportByteArray[<|"Cells"->cells, "List"->CellList|>, "ExpressionJSON", "Compact"->1] // ByteArrayToString
    },
  
      <script id="cells-data" type="application/json">{"storage": <Storage/>}</script>
    ]
  ]
];

cellToHTML["Output", string_String] := With[{sc = StringJoin["<", "script"], bsc = StringJoin["<", "/script"]}, StringRiffle[StringReplace[If[StringLength[#] > 0, If[StringTake[#, 1] == ">", StringDrop[#,1], #], #], {
  "# "~~w__ :> StringJoin["<","h1 style=\"font-size:xx-large; font-weight:600; margin-bottom:0.5rem\">", w, "<","/h1>"],
  "## "~~w__ :> StringJoin["<","h2 style=\"font-size:x-large; font-weight:600; margin-bottom:0.25rem\">", w, "<","/h2>"],
  "### "~~w__ :> StringJoin["<","h3 style=\"font-size:large; font-weight:600; margin-bottom:0.15rem\">", w, "<","/h3>"],
  sc -> StringJoin["<","noscript"],
  bsc -> StringJoin["<","/noscript"],
  RegularExpression["\\[([^\\[\\]]*)\\]\\(([^\\(\\)]*)\\)"] :> With[{text = "$1", link = "$2"}, StringJoin["<","a href=\"", link, "\" >", text, "<", "/", "a>"]],
  any:(__~~__) :> StringJoin["<","p", "style=\"margin-top: 0.5rem\">", any, "<","/","p",">"]

}] &/@ StringSplit[string, "\n"], ""] ];

cellToHTML["Input", string_String] := StringJoin["<","code style=\"font-family: monospace; display:block; margin-top:0.5rem; margin-botoom:0.5rem; padding:0.5rem; \"",">", StringReplace[string, 
  {"&" -> "&amp;", "<" -> "&lt;", ">" -> "&gt;", "\"" -> "&quot;", 
   "'" -> "&#39;"}], "<","/code",">"];

CEOCells[Rule["Notebook", notebook_]] := With[{},
  With[{inputs = notebook["Cells"]},
    With[{c = Select[inputs, (((#["Display"] == "markdown" || #["Display"] == "html") && #["Type"] == "Output") || (#["Type"]=="Input" && #["Display"] == "codemirror" && !StringMatchQ[#["Data"], ".md\n"~~__] && !StringMatchQ[#["Data"], ".html\n"~~__]))&]},
      If[Length[c] == 0,
        <p>Loading, please wait ...</p>,

        Table[With[{Content = cellToHTML[cell["Type"], cell["Data"]]},
          Print[Content];

          <Content/>
        ], {cell, c}]
      ]
    ]
  ]
]

GetTitle[Rule["Notebook", notebook_]] := With[{},
  With[{inputs = Select[notebook["Cells"], InputCellQ]},
    With[{markdown = Select[inputs, StringMatchQ[#["Data"], ".md\n"~~__]&]},
      If[Length[markdown] == 0,
        "WLJS Notebook",

        StringCases[markdown[[1]]["Data"], RegularExpression[".md\n#+(.*)"] :> "$1"] // First
      ]
    ]
  ]
]

Component[OptionsPattern[]] := Module[{settings}, With[{
  Title = OptionValue["Title"],
  notebook = OptionValue["Notebook"],
  ExtensionTemplates = OptionValue["ExtensionTemplates"],
  RootStyles = ProduceStyles[OptionValue["Root"]],
  nid = OptionValue["Notebook"]["Hash"],
  NId = OptionValue["Notebook"]["Hash"]
},

    loadSettings[settings];

    { "<!DOCTYPE html>", 
    <html class="h-full" os="Browser"> 
        <head>
            <meta charset="UTF-8"/>
            <meta serializer="hsfn-4"/>
            <ExportObjects Notebook={notebook}/>
            <meta serializer="separator"/>
            <ExportCells Notebook={notebook} Settings={settings}/>
            <meta serializer="separator"/>
            <ExportStorage Notebook={notebook} Settings={settings}/>
            <meta serializer="end"/>
            <meta serializer="hsfn-extras"/>
            <ExportSymbols Notebook={notebook}/>
            <meta serializer="end-extras"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title><GetTitle Notebook={notebook}/></title>
            <RootStyles/>  
            <ExtensionsStyles Settings={settings}/>
            <ExtensionsJS Settings={settings}/> 
            <WebUIInitializationScript/> 
            <WLJSTransportScript Port={0}/>
            <style>
              .cwrapper {
                padding-top: 0.25rem;
                padding-bottom: 0.25rem;
              }
            </style>
        </head>  
        <body class="h-full dark:bg-black bg-white"> 
          <div>
            <div class="px-2" id="frame">
              <div class="h-full block relative" style="
                width: calc(100vw - 0.5rem);
                overflow-x: hidden;
              ">
                <main class="grow dark:invert dark:contrast-75 dark:brightness-5 dark:hue-rotate-180 bg-white" >
                    <div id="ceo-placeholder" class="px-3 pr-4 py-2 sm:px-2 sm:pr-3 ml-4 md:px-4 md:pr-5 overflow-y-auto absolute grow bg-white" style="margin-top: 1rem; height: 100 vh; width:100%; overflow: hidden;">
                        <CEOCells Notebook={notebook}/>
                    </div>
                    <CellsContainer Notebook={notebook} Meta={"Static web notebook"}></CellsContainer>
                </main>
                <div id="sidebar-right" class="relative mt-10 w-full hidden md:flex" style="width: 16rem;height: 100vh;float: right; opacity:0;">
                  <div class="fixed">
                    <ExtensionTemplates Notebook={notebook} Template={"HTMLExportSidebar"} />
                  </div>
                </div>
              </div>
            </div>
          </div>   
          <script type="module">
            window.server = {
              emitt: () => {}
            }   
          </script>   
          <script type="module">
            <ControlsScript/>   
          </script> 
          <script type="module">
          const jsonstorage = document.getElementById('json-symbols');
          const store = JSON.parse(jsonstorage.innerText)["storage"];

          const a = async () => {
            const assoc = await interpretate(store, {hold:true});

            Object.keys(assoc).forEach(element => {

              core[element] = async (args, env) => {
                console.log('IE: calling our symbol...');
                if (env.root && !env.novirtual) core[element].instances[env.root.uid] = env.root;
                const data = await interpretate(core[element].data, env);
                return data;
              };
            
              core[element].update = async (args, env) => {
                const data = await interpretate(core[element].data, env);
                //if (env.hold) return ['JSObject', data];
                return data;
              }  
            
              core[element].destroy = async (args, env) => {
                delete core[name].instances[env.root.uid];
                console.warn('external symbol was destoryed');
              }                 

              core[element].virtual = true;
              core[element].instances = {};

              core[element].data = assoc[element];
            });
          }

           a(store);
          </script>           
          <script type="module">
            const jsonstorage = document.getElementById('json-objects');
            const store = JSON.parse(jsonstorage.innerText)["storage"];

            const a = async () => {
              const assoc = await interpretate(store, {hold:true});

              Object.keys(assoc).forEach(element => {
                const o = new ObjectStorage(element);
                o.cached = true;
                o.cache = assoc[element];
              });
            }

            a(store);
          </script>
          <script type="module">
            const jsonstorage = document.getElementById('cells-data');
            const store = JSON.parse(jsonstorage.innerText)["storage"];

            const placeholder = document.getElementById('ceo-placeholder');
            const sidebar = document.getElementById("sidebar-right");
            const container = document.getElementById('container-<NId/>');
          

            const process = async () => {
              const assoc = await interpretate(store, {});
              const list    = assoc.List;

              for (const item of Object.values(assoc.Cells)) {
                const template = item.Template;
                const store    = item.Data;

                new CellWrapper(template, store, list, "", {IgnoreList:true});
              }
            }

            process().then(() => {

              const placeholderAnimation = [
                { opacity: "1" },
                { opacity: "0" },
              ];

              const placeholderTiming = {
                duration: 200,
                iterations: 1,
              };

              placeholder.animate(placeholderAnimation, placeholderTiming).finished.then(() => {
                placeholder.remove();
                sidebar.style.opacity = 1;
                container.style.filter = 'none';
              });
              
            });
          </script>
        </body>
    </html>
  } // StringRiffle
]]

Options[Component] = {"Title" -> "Example", "Notebook"->"", "ExtensionTemplates"->{}}

Component